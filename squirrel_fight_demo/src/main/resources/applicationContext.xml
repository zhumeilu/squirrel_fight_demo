<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- 开启注解支持 -->
	<context:annotation-config />
	<!-- 组件扫描 -->
	<!-- <context:component-scan base-package="com.xmg.p2p.base.service;com.xmg.p2p.business.service"/> -->
	<context:component-scan base-package="com.lemeng" />
	<!-- 加载配置文件 -->
	<!-- 第一种方式 <context:property-placeholder location="classpath:*.properties" 
		/> -->
	<!-- 第二种方式 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:db.properties</value>
				<!-- <value>classpath:m5c.properties</value> -->
			</list>
		</property>
	</bean>

	<!-- 1:数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>


	<!-- 2:sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="typeAliasesPackage" value="com.lemeng.*.domain"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="mapperLocations"
			value="classpath:mapper/*.xml"></property>
	</bean>
	<!-- mapper扫描包 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.lemeng.*.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 3:事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- jedis cluster config -->
	<bean name="genericObjectPoolConfig" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig">
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
		<property name="maxTotal" value="${redis.maxTotal}" />
		<property name="minIdle" value="${redis.minIdle}" />
		<property name="maxIdle" value="${redis.maxIdle}" />
	</bean>

	<bean id="jedisCluster" class="com.lemeng.common.redis.JedisClusterUtil"
		  init-method="afterPropertiesSet">
		<property name="address" value="${address}" />
		<property name="timeout" value="${redis.timeout}" />
		<property name="maxRedirections" value="${redis.maxRedirections}" />
		<property name="genericObjectPoolConfig" ref="genericObjectPoolConfig" />
	</bean>


	<!-- 4:事务AOP -->
	<!--<tx:advice id="crudAdvice" transaction-manager="txManager">-->
		<!--<tx:attributes>-->
			<!--<tx:method name="get*" read-only="true" />-->
			<!--<tx:method name="list*" read-only="true" />-->
			<!--<tx:method name="query*" read-only="true" />-->
			<!--<tx:method name="*" />-->
		<!--</tx:attributes>-->
	<!--</tx:advice>-->
	<!--<aop:config>-->
		<!--<aop:pointcut expression="execution(* com.jbers.farmer.service.*Service.*(..))"-->
			<!--id="txPoint" />-->
		<!--<aop:advisor advice-ref="crudAdvice" pointcut-ref="txPoint" />-->
	<!--</aop:config>-->

	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<!--<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">-->
		<!--&lt;!&ndash; 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 &ndash;&gt;-->
		<!--<property name="connectionFactory" ref="connectionFactory" />-->
	<!--</bean>-->

	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
	<!--<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">-->
		<!--<property name="brokerURL" value="tcp://127.0.0.1:61616" />-->
	<!--</bean>-->

	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<!--<bean id="connectionFactory"-->
		<!--class="org.springframework.jms.connection.SingleConnectionFactory">-->
		<!--&lt;!&ndash; 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory &ndash;&gt;-->
		<!--<property name="targetConnectionFactory" ref="targetConnectionFactory" />-->
	<!--</bean>-->

	<!--这个是队列目的地 -->
	<!-- <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue"> 
		<constructor-arg> <value>queue</value> </constructor-arg> </bean> -->
	<!-- 消息监听器 -->
	<!-- <bean id="consumerMessageListener" class="com.jbers.farmer.listener.SendMessageListener"/> -->
	<!-- 消息监听容器 -->
	<!-- <bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer"> 
		<property name="connectionFactory" ref="connectionFactory" /> <property name="destination" 
		ref="queueDestination" /> <property name="messageListener" ref="consumerMessageListener" 
		/> </bean> -->

	<import resource="spring-mybatis.xml"/>
</beans>